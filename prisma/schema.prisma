generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    role          Role?     @relation(fields: [roleId], references: [id])
    roleId        String?
    office        Office?   @relation(fields: [officeId], references: [id])
    officeId      String?
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@index([roleId])
    @@index([officeId])
}

model Role {
    id          String       @id @default(cuid())
    title       String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime?    @updatedAt
    color       String?      @default("gray")
    user        User[]
    permissions Permission[]
}

model Permission {
    id          String    @id @default(cuid())
    title       String
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
    roles       Role[]
}

model Office {
    id        String    @id @default(cuid())
    title     String
    icon      String    @db.VarChar(1)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    createdBy String?
    updatedBy String?
    log       Log[]
    user      User[]
}

model Category {
    id        String    @id @default(cuid())
    title     String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    createdBy String?
    updatedBy String?
    log       Log[]
}

model Log {
    id          String    @id @default(cuid())
    status      Status?
    officeId    String
    office      Office    @relation(fields: [officeId], references: [id])
    categoryId  String
    category    Category  @relation(fields: [categoryId], references: [id])
    docId       String
    letterId    String?
    title       String
    description String?
    source      String
    dateIn      DateTime?
    dateOut     DateTime?
    comment     String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
    deletedAt   DateTime? @default(now())
    createdBy   String?
    updatedBy   String?
    deletedBy   String?
    file        File[]

    @@index([officeId])
    @@index([categoryId])
}

model File {
    id        String    @id @default(cuid())
    logId     String?
    log       Log?      @relation(fields: [logId], references: [id])
    title     String
    size      Int
    url       String
    extension String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @default(now())
    createdBy String?
    updatedBy String?
    deletedBy String?

    @@index([logId])
}

enum Status {
    WAITING
    ASSIGNED
}
